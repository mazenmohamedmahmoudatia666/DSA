// https://leetcode.com/problems/sequence-reconstruction/



class Solution {
public:
    bool sequenceReconstruction(vector<int> &org, vector<vector<int>> &seqs) {
        if (seqs.empty()) return false;

        vector<vector<int>> graph(org.size() + 1);
        vector<int> indegree(org.size() + 1, 0);

        // Build the graph and indegree array
        for (const auto &seq : seqs) {
            for (int i = 1; i < seq.size(); i++) {
                int u = seq[i - 1], v = seq[i];
                graph[u].push_back(v);
                indegree[v]++;
            }
        }

        queue<int> q;
        for (int i = 1; i <= org.size(); i++) {
            if (indegree[i] == 0) q.push(i);
        }

        int idx = 0;
        while (!q.empty()) {
            if (q.size() > 1) return false; // More than one possible supersequence
            int node = q.front();
            q.pop();

            if (org[idx] != node) return false; // org should match the current node
            idx++;

            for (int neighbor : graph[node]) {
                if (--indegree[neighbor] == 0) q.push(neighbor);
            }
        }

        return idx == org.size();
    }
};
